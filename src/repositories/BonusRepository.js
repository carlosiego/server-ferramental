const executeQuery = require('../database/executeQuery')

class BonusRepository {

	async findBonus() {

		let bonus = await executeQuery(`
			SELECT
				PCBONUSC.NUMBONUS,
				PCBONUSC.DATABONUS,
				PCBONUSC.DATARM,
				PCBONUSC.VALORTOTAL,
				PCBONUSC.DTMONTAGEM,
				PCNFENTPREENT.NUMNOTA,
				PCFORNEC.FORNECEDOR
			FROM PCBONUSC
			JOIN PCNFENTPREENT ON PCNFENTPREENT.NUMBONUS = PCBONUSC.NUMBONUS
			JOIN PCFORNEC ON PCNFENTPREENT.CODFORNEC = PCFORNEC.CODFORNEC
			WHERE PCBONUSC.DTFECHAMENTO IS NULL AND PCBONUSC.DTCANCEL IS NULL
			ORDER BY PCBONUSC.DTMONTAGEM ASC
		`)

		return bonus
	}

	async findBonusItens({ numbonus }) {

		let itens = await executeQuery(`
			SELECT
			PCBONUSI.CODPROD,
			PCPRODUT.CODFAB,
			PCBONUSI.QTNF,
			PCBONUSI.QTENTRADA,
			PCBONUSI.DTVALIDADE,
			PCPRODUT.DESCRICAO,
			PCPRODUT.EMBALAGEM,
			NVL(REGEXP_SUBSTR(PCPRODUT.DIRFOTOPROD, '[^\\]+$'), 'not-found.png') AS DIRFOTOPROD,
			(
				SELECT LISTAGG(PCEMB.CODAUXILIAR, ',') WITHIN GROUP (ORDER BY PCEMB.CODAUXILIAR)
				FROM PCEMBALAGEM PCEMB
				WHERE PCEMB.CODPROD = PCBONUSI.CODPROD
			) AS CODAUXILIARES,
			PCMARCA.MARCA
			FROM PCBONUSI
			JOIN PCPRODUT ON PCPRODUT.CODPROD = PCBONUSI.CODPROD
			LEFT JOIN PCMARCA ON PCPRODUT.CODMARCA = PCMARCA.CODMARCA
			WHERE PCBONUSI.NUMBONUS = :numbonus
			ORDER BY PCPRODUT.DESCRICAO
		` ,{ numbonus })

		return itens
	}

	async saveConferBonus({ numbonus }) {

		try {

			await executeQuery(`
				BEGIN

					UPDATE PCBONUSC
						SET DATARM = CURRENT_DATE,
						CODFUNCRM = 48
					WHERE NUMBONUS = :numbonus;

					UPDATE PCBONUSI
						SET QTENTRADA = QTNF,
						QTENTUN = QTNF
					WHERE NUMBONUS = :numbonus;

					COMMIT;
				END;
			`, { numbonus });

			return true

	} catch (err) {
		console.error(`ERRO AO CONFERIR O BÃ”NUS ${numberOrder}:`, err);
		return false
	}
	}

}

module.exports = new BonusRepository()
