const executeQuery = require('../database/executeQuery');

class ProductsRepository {

	async findByCode(code) {

		let product = await executeQuery(`
      SELECT
        PCPRODUT.CODPROD,
        PCPRODUT.DESCRICAO,
        PCTABPR.PTABELA,
        PCEST.DTULTENT,
        PCEST.DTULTSAIDA,
        PCEST.QTULTENT,
        (PCEST.QTESTGER - PCEST.QTRESERV - PCEST.QTPENDENTE) AS QTDISPONIVEL,
        PCEST.QTESTGER,
        PCEST.QTRESERV,
        PCPRODUT.EMBALAGEM,
        PCPRODUT.CODAUXILIAR,
        PCDESCONTO.PERCDESC AS DESCONTO,
        PCDESCONTO.DTINICIO AS DTINICIODESCONTO,
        PCDESCONTO.DTFIM AS DTFIMDESCONTO,
        PCPRODUT.INFORMACOESTECNICAS
      FROM PCPRODUT
        JOIN PCTABPR ON PCTABPR.CODPROD = PCPRODUT.CODPROD
        JOIN PCEST ON PCEST.CODPROD = PCPRODUT.CODPROD
        LEFT JOIN PCDESCONTO ON PCDESCONTO.CODPROD = PCPRODUT.CODPROD
      WHERE PCPRODUT.CODPROD = :code AND PCPRODUT.REVENDA != 'N' AND PCPRODUT.OBS2 != 'FL'
      `, { code })

		return product;
	}

	async findByDescription(description, orderBy = 'ASC') {

		description = description.toUpperCase()
		description = description.replaceAll(' ', '%')
		description = description.endsWith('%') ? description : description + '%'

		let direction = orderBy.toUpperCase() === 'DESC' ? 'DESC' : 'ASC'
		console.log(description)

		let produtcs = await executeQuery(`
          SELECT
						PCPRODUT.CODPROD,
            PCPRODUT.DESCRICAO,
            PCTABPR.PTABELA,
            PCEST.DTULTENT,
            PCEST.DTULTSAIDA,
            PCEST.QTULTENT,
            (PCEST.QTESTGER - PCEST.QTRESERV - PCEST.QTPENDENTE) AS QTDISPONIVEL,
            PCEST.QTESTGER,
            PCEST.QTRESERV,
            PCPRODUT.EMBALAGEM,
            PCPRODUT.CODAUXILIAR,
						PCDESCONTO.PERCDESC AS DESCONTO,
						PCDESCONTO.DTINICIO AS DTINICIODESCONTO,
						PCDESCONTO.DTFIM AS DTFIMDESCONTO,
						PCPRODUT.INFORMACOESTECNICAS
          FROM PCPRODUT
            JOIN PCTABPR ON PCTABPR.CODPROD = PCPRODUT.CODPROD
            JOIN PCEST ON PCEST.CODPROD = PCPRODUT.CODPROD
						LEFT JOIN PCDESCONTO ON PCDESCONTO.CODPROD = PCPRODUT.CODPROD
          WHERE PCPRODUT.DESCRICAO LIKE :description AND PCPRODUT.REVENDA != 'N' AND PCPRODUT.OBS2 != 'FL'
          ORDER BY PCPRODUT.DESCRICAO ${direction}
          `, { description })

		return produtcs;
	}

	async findByCodeBar(codeBar) {

		let produtc = await executeQuery(`
      SELECT
				PCPRODUT.CODPROD,
        PCPRODUT.DESCRICAO,
        PCTABPR.PTABELA,
        PCEST.DTULTENT,
        PCEST.DTULTSAIDA,
        PCEST.QTULTENT,
        (PCEST.QTESTGER - PCEST.QTRESERV - PCEST.QTPENDENTE) AS QTDISPONIVEL,
        PCEST.QTESTGER,
        PCEST.QTRESERV,
        PCPRODUT.EMBALAGEM,
        PCPRODUT.CODAUXILIAR,
				PCDESCONTO.PERCDESC AS DESCONTO,
				PCDESCONTO.DTINICIO AS DTINICIODESCONTO,
				PCDESCONTO.DTFIM AS DTFIMDESCONTO,
				PCPRODUT.INFORMACOESTECNICAS
      FROM PCPRODUT
      JOIN PCTABPR ON PCTABPR.CODPROD = PCPRODUT.CODPROD
      JOIN PCEST ON PCEST.CODPROD = PCPRODUT.CODPROD
			LEFT JOIN PCDESCONTO ON PCDESCONTO.CODPROD = PCPRODUT.CODPROD
      WHERE PCPRODUT.CODAUXILIAR = :codebar AND PCPRODUT.REVENDA != 'N' AND PCPRODUT.OBS2 != 'FL'
    `, { codeBar })

		return produtc;
	}

	async findBySection(codeSection) {
		let products = await executeQuery(`
		SELECT
			PCPRODUT.CODPROD,
			PCPRODUT.DESCRICAO,
			PCTABPR.PTABELA,
			PCEST.DTULTENT,
			PCEST.DTULTSAIDA,
			PCEST.QTULTENT,
			(PCEST.QTESTGER - PCEST.QTRESERV - PCEST.QTPENDENTE) AS QTDISPONIVEL,
			PCEST.QTESTGER,
			PCEST.QTRESERV,
			PCPRODUT.EMBALAGEM,
			PCPRODUT.CODAUXILIAR,
			PCDESCONTO.PERCDESC AS DESCONTO,
			PCDESCONTO.DTINICIO AS DTINICIODESCONTO,
			PCDESCONTO.DTFIM AS DTFIMDESCONTO,
			PCPRODUT.INFORMACOESTECNICAS
		FROM PCPRODUT
		JOIN PCTABPR ON PCTABPR.CODPROD = PCPRODUT.CODPROD
		JOIN PCEST ON PCEST.CODPROD = PCPRODUT.CODPROD
		LEFT JOIN PCDESCONTO ON PCDESCONTO.CODPROD = PCPRODUT.CODPROD
		WHERE PCPRODUT.CODSEC = :codesection AND PCPRODUT.REVENDA != 'N' AND PCPRODUT.OBS2 != 'FL'
	`, { codeSection })

	return products;
	}

	async findPromotions() {

		let promotions = await executeQuery(`
			SELECT
				PCPRODUT.CODPROD,
				PCPRODUT.DESCRICAO,
				PCTABPR.PTABELA,
				PCEST.DTULTENT,
				PCEST.DTULTSAIDA,
				PCEST.QTULTENT,
				(PCEST.QTESTGER - PCEST.QTRESERV - PCEST.QTPENDENTE) AS QTDISPONIVEL,
				PCEST.QTESTGER,
				PCEST.QTRESERV,
				PCPRODUT.EMBALAGEM,
				PCPRODUT.CODAUXILIAR,
				PCDESCONTO.PERCDESC AS DESCONTO,
				PCDESCONTO.DTINICIO AS DTINICIODESCONTO,
				PCDESCONTO.DTFIM AS DTFIMDESCONTO,
				PCPRODUT.INFORMACOESTECNICAS
			FROM PCDESCONTO
			JOIN PCTABPR ON PCTABPR.CODPROD = PCDESCONTO.CODPROD
			JOIN PCPRODUT ON PCPRODUT.CODPROD = PCDESCONTO.CODPROD
			JOIN PCEST ON PCEST.CODPROD = PCDESCONTO.CODPROD
			WHERE PCPRODUT.REVENDA != 'N' AND PCPRODUT.OBS2 != 'FL' AND DTINICIO <= CURRENT_DATE AND DTFIM >= CURRENT_DATE
		`)

		return promotions
	}

	async findByEstMin() {
		console.log('ok')
	}

};

module.exports = new ProductsRepository();
